package com.urlcount.utils;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedHashMap;import org.apache.log4j.Level;import org.apache.log4j.LogManager;import org.apache.log4j.Logger;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.CellStyle;import org.apache.poi.ss.usermodel.Font;import org.apache.poi.ss.usermodel.IndexedColors;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.xssf.usermodel.XSSFCellStyle;import org.apache.poi.xssf.usermodel.XSSFFont;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import com.urlcount.object.CSSSelector;public class ExcelReader {	private static final Logger logger = LogManager.getLogger(ExcelReader.class);		public String file; 	public static int rowNum = 0;	public String syspath = System.getProperty("user.dir") + "/resource/";	public FileInputStream fis = null;	public FileOutputStream fileOut = null;	private XSSFWorkbook workbook = null;	private static XSSFSheet sheet = null;	private static Row row = null;	private Cell cell = null;	static int rownum = 1;	public static int findCurrentRowNo(String fileName) throws Exception {		Row row = null;		Cell cell = null;		// ctx.getLogger().info(">> Writing to excel file");		FileInputStream file = new FileInputStream(new File(fileName));		XSSFWorkbook workbook = new XSSFWorkbook(file);		sheet = workbook.getSheetAt(0);				int x = sheet.getLastRowNum();		 		rownum = ++x;		 		return rownum;	}	public static void clearDataFromExcel(String fileName) throws IOException	{		FileInputStream file = new FileInputStream(new File(fileName));		XSSFWorkbook workbook = new XSSFWorkbook(file);		XSSFSheet sheet = workbook.getSheetAt(0);		for (int i = sheet.getLastRowNum(); i >= 1; i--) {			System.out.println("Removing lines");			sheet.removeRow(sheet.getRow(sheet.getLastRowNum()));		}		File outWB = new File(fileName);		OutputStream out = new FileOutputStream(outWB);		workbook.write(out);		out.flush();		out.close();	}		public static void createExcel(String filename)    {    	XSSFWorkbook workbook = new XSSFWorkbook();        XSSFSheet sheet = workbook.createSheet("URL Count");        Object[][] datatypes = {                {"URL", "Result"}        };        int rowNum = 0;        logger.info("Creating excel:"+filename);        CellStyle style = workbook.createCellStyle();        Font font = workbook.createFont();        font.setBoldweight(Font.BOLDWEIGHT_BOLD);        style.setFont(font);                        for (Object[] datatype : datatypes) {            Row row = sheet.createRow(rowNum++);            int colNum = 0;            for (Object field : datatype) {                Cell cell = row.createCell(colNum++);                cell.setCellStyle(style);                if (field instanceof String) {                    cell.setCellValue((String) field);                } else if (field instanceof Integer) {                    cell.setCellValue((Integer) field);                }            }        }        try {            FileOutputStream outputStream = new FileOutputStream(filename);            workbook.write(outputStream);            outputStream.close();        } catch (FileNotFoundException e) {            logger.info(e.getMessage());        } catch (IOException e) {        	logger.info(e.getMessage());        }        logger.info(filename+" creation Done");    }	public static void writeToExcel(File outputFile, int columnNum, String data, int sheetnum, int rownum)			throws IOException {		Row row = null;		Cell cell = null;		try {			logger.info("Writting :" + data + " to " + outputFile.getAbsolutePath());			// ctx.getLogger().info(">> Writing to excel file");			FileInputStream file = new FileInputStream(outputFile);			XSSFWorkbook workbook = new XSSFWorkbook(file);			sheet = workbook.getSheetAt(0);			//sheet.autoSizeColumn(0);			if (sheet.getRow(rownum) != null) {				row = sheet.getRow(rownum);			} else {				row = sheet.createRow(rownum);			}			if (row.getCell(columnNum) != null) {				cell = row.getCell(columnNum);			} else {				cell = row.createCell(columnNum);			}			// Cell cell = row.createCell(columnNum);			// Cell column = row.getCell(columnNum);						//sheet.setColumnWidth(0, 100000);						CellStyle style = workbook.createCellStyle(); //Create new style            style.setWrapText(true); //Set wordwrap            cell.setCellStyle(style);			cell.setCellValue(data);			file.close();			/*			 * FileOutputStream out = new FileOutputStream(new File(fileName),true);			 * workbook.write(out);			 */			 			if (!outputFile.exists()) {				outputFile.createNewFile();			}			sheet.setColumnWidth(0, 17275);			//sheet.autoSizeColumn(columnNum);		 						FileOutputStream out = new FileOutputStream(outputFile, false);			workbook.write(out);			out.close();			// ctx.getLogger().info(">> Result Excel written successfully on disk.");		} catch (Exception e) {			 			logger.log(Level.ERROR,e.getMessage(),e);			// ctx.getLogger().info(">> Writing to excel file");			FileInputStream file = new FileInputStream(outputFile);			XSSFWorkbook workbook = new XSSFWorkbook(file);			sheet = workbook.getSheetAt(0);			if (sheet.getRow(rownum) != null) {				row = sheet.getRow(rownum);			} else {				row = sheet.createRow(rownum);			}			if (row.getCell(columnNum) != null) {				cell = row.getCell(columnNum);			} else {				cell = row.createCell(columnNum);			}			// Cell cell = row.createCell(columnNum);			// Cell column = row.getCell(columnNum);			cell.setCellValue(data);			file.close();			/*			 * FileOutputStream out = new FileOutputStream(new File(fileName),true);			 * workbook.write(out);			 */			 			if (!outputFile.exists()) {				outputFile.createNewFile();			}			FileOutputStream out = new FileOutputStream(outputFile, false);			workbook.write(out);			out.close();			// ctx.getLogger().info(">> Result Excel written successfully on disk.");		}	}	public static void setValueIntoCrIDCell(String fileName, int iColumnNumber, int iRowNumber, int sheetNum,			String strData) throws Throwable {		System.out.println("FirstiRowNumber" + iRowNumber);		String mode = null;		String excelCountry = null;		// String data=null;		ArrayList<String> data = new ArrayList<String>();		// String data=null;		// int rowNum=-1;		boolean flag = false;		Row row = null;		Cell cell = null;		FileInputStream file = new FileInputStream(new File(fileName));		XSSFWorkbook workbook = new XSSFWorkbook(file);		sheet = workbook.getSheetAt(sheetNum);		XSSFFont titleFont = workbook.createFont();		/*		 * XSSFWorkbook my_workbook = new XSSFWorkbook(); XSSFSheet my_sheet =		 * my_workbook.createSheet("Cell Font"); Get access to XSSFCellStyle		 */		XSSFCellStyle my_style = workbook.createCellStyle();		/* Create XSSFFont object from the workbook */		XSSFFont my_font = workbook.createFont();		if ((strData.equals("NA")) || (strData.equals("CRID not generated"))) {			System.out.println("Red Colour Setting");			/* set the weight of the font */			my_font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);			/* Also make the font color to RED */			my_font.setColor(XSSFFont.COLOR_RED);			/* attach the font to the style created earlier */			my_style.setFont(my_font);		}		else		{ /* Also make the font color to RED */			my_font.setColor(XSSFFont.COLOR_NORMAL);			/* attach the font to the style created earlier */			my_style.setFont(my_font);		}		/* At this stage, we have a bold style created which we can attach to a cell */		/* Create a row in the sheet */		/*		 * Row row = sheet.createRow(0); Create a cell Cell cell = row.createCell(0);		 */		if (sheet.getRow(iRowNumber) != null) {			row = sheet.getRow(iRowNumber);		} else {			row = sheet.createRow(iRowNumber);		}		if (row.getCell(iColumnNumber) != null) {			cell = row.getCell(iColumnNumber);		} else {			cell = row.createCell(iColumnNumber);		}		// row=sheet.getRow(iRowNumber);		// cell=row.getCell(iColumnNumber);		System.out.println("iRowNumber" + iRowNumber);		System.out.println("iColumnNumber" + iColumnNumber);		cell.setCellValue(strData);		/* Attach the style to the cell */		cell.setCellStyle(my_style);		/* Write changes to the workbook */		FileOutputStream out = new FileOutputStream(new File(fileName));		workbook.write(out);		out.close();		// int noOfRows=sheet.getLastRowNum();		// font= workbook.createFont();		if (strData.equals("0.00") || (strData.equals("00.00"))) {			System.out.println("title font colour");			titleFont.setColor(IndexedColors.DARK_RED.getIndex());		}	}	public static void setValueIntoCellError(String fileName, int iColumnNumber, int iRowNumber, int sheetNum,			String strData) throws Throwable {		System.out.println("FirstiRowNumber" + iRowNumber);		String mode = null;		String excelCountry = null;		// String data=null;		ArrayList<String> data = new ArrayList<String>();		// String data=null;		// int rowNum=-1;		boolean flag = false;		Row row = null;		Cell cell = null;		FileInputStream file = new FileInputStream(new File(fileName));		XSSFWorkbook workbook = new XSSFWorkbook(file);		sheet = workbook.getSheetAt(sheetNum);		XSSFFont titleFont = workbook.createFont();		/*		 * XSSFWorkbook my_workbook = new XSSFWorkbook(); XSSFSheet my_sheet =		 * my_workbook.createSheet("Cell Font"); Get access to XSSFCellStyle		 */		XSSFCellStyle my_style = workbook.createCellStyle();		/* Create XSSFFont object from the workbook */		XSSFFont my_font = workbook.createFont();		if ((strData.equals("Complete")) || ((strData.equals("NA")))) {			/* Also make the font color to RED */			my_font.setColor(XSSFFont.COLOR_NORMAL);			/* attach the font to the style created earlier */			my_style.setFont(my_font);		}		else		{			System.out.println("Red Colour Setting");			/* set the weight of the font */			my_font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);			/* Also make the font color to RED */			my_font.setColor(XSSFFont.COLOR_RED);			/* attach the font to the style created earlier */			my_style.setFont(my_font);		}		my_style.setFillForegroundColor(IndexedColors.YELLOW.getIndex());		my_style.setFillPattern(CellStyle.SOLID_FOREGROUND);		my_style.setBorderBottom(XSSFCellStyle.BORDER_THIN);		my_style.setBorderTop(XSSFCellStyle.BORDER_THIN);		my_style.setBorderRight(XSSFCellStyle.BORDER_THIN);		my_style.setBorderLeft(XSSFCellStyle.BORDER_THIN);		/* At this stage, we have a bold style created which we can attach to a cell */		/* Create a row in the sheet */		/*		 * Row row = sheet.createRow(0); Create a cell Cell cell = row.createCell(0);		 */		if (sheet.getRow(iRowNumber) != null) {			row = sheet.getRow(iRowNumber);		} else {			row = sheet.createRow(iRowNumber);		}		if (row.getCell(iColumnNumber) != null) {			cell = row.getCell(iColumnNumber);		} else {			cell = row.createCell(iColumnNumber);		}		// row=sheet.getRow(iRowNumber);		// cell=row.getCell(iColumnNumber);		System.out.println("iRowNumber" + iRowNumber);		System.out.println("iColumnNumber" + iColumnNumber);		cell.setCellValue(strData);		/* Attach the style to the cell */		cell.setCellStyle(my_style);		/* Write changes to the workbook */		FileOutputStream out = new FileOutputStream(new File(fileName));		workbook.write(out);		out.close();		// int noOfRows=sheet.getLastRowNum();		// font= workbook.createFont();		if (strData.equals("0.00") || (strData.equals("00.00"))) {			System.out.println("title font colour");			titleFont.setColor(IndexedColors.DARK_RED.getIndex());		}	}	public static void setValueIntoCell(String fileName, int iColumnNumber, int iRowNumber, int sheetNum,			String strData) throws Throwable {		System.out.println("FirstiRowNumber" + iRowNumber);		String mode = null;		String excelCountry = null;		// String data=null;		ArrayList<String> data = new ArrayList<String>();		// String data=null;		// int rowNum=-1;		boolean flag = false;		Row row = null;		Cell cell = null;		FileInputStream file = new FileInputStream(new File(fileName));		XSSFWorkbook workbook = new XSSFWorkbook(file);		sheet = workbook.getSheetAt(sheetNum);		XSSFFont titleFont = workbook.createFont();		/*		 * XSSFWorkbook my_workbook = new XSSFWorkbook(); XSSFSheet my_sheet =		 * my_workbook.createSheet("Cell Font"); Get access to XSSFCellStyle		 */		XSSFCellStyle my_style = workbook.createCellStyle();		/* Create XSSFFont object from the workbook */		XSSFFont my_font = workbook.createFont();		if ((strData.equals("0.00")) || (strData.equals("00.00")) || (strData.equals("0.0")) || (strData.equals("NA"))				|| (strData.equals("Complete"))) {			/* Also make the font color to RED */			my_font.setColor(XSSFFont.COLOR_NORMAL);			/* attach the font to the style created earlier */			my_style.setFont(my_font);		}		else		{			System.out.println("Red Colour Setting");			/* set the weight of the font */			my_font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);			/* Also make the font color to RED */			my_font.setColor(XSSFFont.COLOR_RED);			/* attach the font to the style created earlier */			my_style.setFont(my_font);			my_style.setFillForegroundColor(IndexedColors.YELLOW.getIndex());			my_style.setFillPattern(CellStyle.SOLID_FOREGROUND);		}		/* At this stage, we have a bold style created which we can attach to a cell */		/* Create a row in the sheet */		/*		 * Row row = sheet.createRow(0); Create a cell Cell cell = row.createCell(0);		 */		if (sheet.getRow(iRowNumber) != null) {			row = sheet.getRow(iRowNumber);		} else {			row = sheet.createRow(iRowNumber);		}		if (row.getCell(iColumnNumber) != null) {			cell = row.getCell(iColumnNumber);		} else {			cell = row.createCell(iColumnNumber);		}		// row=sheet.getRow(iRowNumber);		// cell=row.getCell(iColumnNumber);		System.out.println("iRowNumber" + iRowNumber);		System.out.println("iColumnNumber" + iColumnNumber);		cell.setCellValue(strData);		/* Attach the style to the cell */		cell.setCellStyle(my_style);		/* Write changes to the workbook */		FileOutputStream out = new FileOutputStream(new File(fileName));		workbook.write(out);		out.close();		// int noOfRows=sheet.getLastRowNum();		// font= workbook.createFont();		if (strData.equals("0.00") || (strData.equals("00.00"))) {			System.out.println("title font colour");			titleFont.setColor(IndexedColors.DARK_RED.getIndex());		}	}	public static void errorNotappears(String fileName, int sheetNum, int row) {		try {			XSSFWorkbook wb = new XSSFWorkbook(new FileInputStream(new File(fileName)));			XSSFSheet sheet = wb.getSheetAt(sheetNum);			makeRowBoldfor(wb, sheet.getRow(row));			wb.write(new FileOutputStream(new File(fileName)));		} catch (IOException e) {			e.printStackTrace();		}	}	public static void errorappears(String fileName, int sheetNum, int row) {		try {			XSSFWorkbook wb = new XSSFWorkbook(new FileInputStream(new File(fileName)));			XSSFSheet sheet = wb.getSheetAt(sheetNum);			makeRowBold(wb, sheet.getRow(row));			wb.write(new FileOutputStream(new File(fileName)));		} catch (IOException e) {			e.printStackTrace();		}	}	public static void makeRowBoldfor(Workbook workbook, Row row) {		CellStyle cellStyle = workbook.createCellStyle();		System.out.println("There is no errors in Zuora");		cellStyle.setFillForegroundColor(IndexedColors.LIGHT_GREEN.getIndex());		cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);		cellStyle.setBorderBottom(XSSFCellStyle.BORDER_THIN);		cellStyle.setBorderTop(XSSFCellStyle.BORDER_THIN);		cellStyle.setBorderRight(XSSFCellStyle.BORDER_THIN);		cellStyle.setBorderLeft(XSSFCellStyle.BORDER_THIN);		// font.setBold(true);		for (int i = 0; i < row.getLastCellNum(); i++) {// For each cell in the row			row.getCell(i).setCellStyle(cellStyle);// Set the sty;e		}	}	public static void makeRowBold(Workbook workbook, Row row) {		CellStyle cellStyle = workbook.createCellStyle();		cellStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());		cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);		cellStyle.setBorderBottom(XSSFCellStyle.BORDER_THIN);		cellStyle.setBorderTop(XSSFCellStyle.BORDER_THIN);		cellStyle.setBorderRight(XSSFCellStyle.BORDER_THIN);		cellStyle.setBorderLeft(XSSFCellStyle.BORDER_THIN);		for (int i = 0; i < row.getLastCellNum(); i++) {			row.getCell(i).setCellStyle(cellStyle);		}	}	public static ArrayList<CSSSelector> readExcel(String fileName, String ValueType, int sheetNum) {		// System.out.println("filename:"+fileName);		// System.out.println("---------country-----:"+country);		String urlStr = null;		String homeSelectorStr = null;		String cssSelectorStr = null;		String cssSelectorStr2 = null;		// String data=null;		LinkedHashMap<String, String> data = new LinkedHashMap<String, String>();		ArrayList<CSSSelector> urlList = new ArrayList<CSSSelector>();		// String data=null;		// int rowNum=-1;		boolean flag = false;		Row row = null;		Cell urlCell = null;		Cell homeCell = null;		Cell cssCell = null;		Cell cssCell2 = null;		try {			FileInputStream file = new FileInputStream(new File(fileName));			XSSFWorkbook workbook = new XSSFWorkbook(file);			sheet = workbook.getSheetAt(sheetNum);			int noOfRows = sheet.getLastRowNum();			for (int i = 1; i <= noOfRows; i++) {								row = sheet.getRow(i);				urlCell = row.getCell(0);				if (urlCell != null) {					urlStr = urlCell.getStringCellValue().trim();									}				 				cssCell = row.getCell(1);				if (cssCell != null) {										cssSelectorStr = cssCell.getStringCellValue().trim();									}				else				{					cssSelectorStr="0";				}				cssCell2 = row.getCell(2);				if (cssCell2 != null) {										cssSelectorStr2 = cssCell2.getStringCellValue().trim();									}				else				{					cssSelectorStr2="0";				}				CSSSelector cSSSelector= new CSSSelector(urlStr, homeSelectorStr,cssSelectorStr, cssSelectorStr2, "");				 				urlList.add(cSSSelector);				//data.put(urlStr, cssSelectorStr);				flag = true;				/*if (flag) {					logger.info("  Successfully read excel file data.");				} else					logger.info("  Error reading excel file data.");*/			}			logger.info("No of records read from excel:"+urlList.size());			file.close();		} catch (FileNotFoundException e) {			// TODO Auto-generated catch block			logger.error(">> Got exception: " + e.getMessage() + " at readExcel method");		} catch (IOException e) {			// TODO Auto-generated catch block			logger.error(e.getMessage());		}		return urlList;	}	public static void setValueIntoCrIDCellError(String fileName, int iColumnNumber, int iRowNumber, int sheetNum,			String strData) throws Throwable {		System.out.println("FirstiRowNumber" + iRowNumber);		String mode = null;		String excelCountry = null;		// String data=null;		ArrayList<String> data = new ArrayList<String>();		// String data=null;		// int rowNum=-1;		boolean flag = false;		Row row = null;		Cell cell = null;		FileInputStream file = new FileInputStream(new File(fileName));		XSSFWorkbook workbook = new XSSFWorkbook(file);		sheet = workbook.getSheetAt(sheetNum);		XSSFFont titleFont = workbook.createFont();		/*		 * XSSFWorkbook my_workbook = new XSSFWorkbook(); XSSFSheet my_sheet =		 * my_workbook.createSheet("Cell Font"); Get access to XSSFCellStyle		 */		XSSFCellStyle my_style = workbook.createCellStyle();		/* Create XSSFFont object from the workbook */		XSSFFont my_font = workbook.createFont();		if ((strData.equals("NA")) || (strData.equalsIgnoreCase("CRID not generated"))) {			System.out.println("Red Colour Setting");			/* set the weight of the font */			my_font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);			/* Also make the font color to RED */			my_font.setColor(XSSFFont.COLOR_RED);			/* attach the font to the style created earlier */			my_style.setFont(my_font);		}		else		{ /* Also make the font color to RED */			my_font.setColor(XSSFFont.COLOR_NORMAL);			/* attach the font to the style created earlier */			my_style.setFont(my_font);		}		my_style.setFillForegroundColor(IndexedColors.YELLOW.getIndex());		my_style.setFillPattern(CellStyle.SOLID_FOREGROUND);		my_style.setBorderBottom(XSSFCellStyle.BORDER_THIN);		my_style.setBorderTop(XSSFCellStyle.BORDER_THIN);		my_style.setBorderRight(XSSFCellStyle.BORDER_THIN);		my_style.setBorderLeft(XSSFCellStyle.BORDER_THIN);		/* At this stage, we have a bold style created which we can attach to a cell */		/* Create a row in the sheet */		/*		 * Row row = sheet.createRow(0); Create a cell Cell cell = row.createCell(0);		 */		if (sheet.getRow(iRowNumber) != null) {			row = sheet.getRow(iRowNumber);		} else {			row = sheet.createRow(iRowNumber);		}		if (row.getCell(iColumnNumber) != null) {			cell = row.getCell(iColumnNumber);		} else {			cell = row.createCell(iColumnNumber);		}		// row=sheet.getRow(iRowNumber);		// cell=row.getCell(iColumnNumber);		System.out.println("iRowNumber" + iRowNumber);		System.out.println("iColumnNumber" + iColumnNumber);		cell.setCellValue(strData);		/* Attach the style to the cell */		cell.setCellStyle(my_style);		/* Write changes to the workbook */		FileOutputStream out = new FileOutputStream(new File(fileName));		workbook.write(out);		out.close();		// int noOfRows=sheet.getLastRowNum();		// font= workbook.createFont();		if (strData.equals("0.00") || (strData.equals("00.00"))) {			System.out.println("title font colour");			titleFont.setColor(IndexedColors.DARK_RED.getIndex());		}	}}